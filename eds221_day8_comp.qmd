---
title: "Day 8 Comp"
format: html
editor: visual
---

## Review basics of ggplot

```{r}
library(tidyverse)
library(here)
library(janitor)
# Specifically for plots:
library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)

# And for another dataset we'll explore:
library(gapminder)

# Spatial
library(sf)
```

## Read in data

```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

do some data wrangling to create a new subset from lizards where you:

1.  limit data to only contain "western whiptails", colorado checkered, and eastern fence lizards
2.  add a new column with total_length converted from mm to cm
3.  group by species and site
4.  return a summary table with mean total length and standard deviation of species and site

```{r}
lizards_subset <- lizards %>% 
  filter(common_name %in% c("western whiptail", "colorado checkered", "eastern fence")) %>% 
  mutate(length_cm = total_length / 10)

lizards_summary <- lizards_subset %>% 
  group_by(common_name, site) %>% 
  summarize(mean_length = mean(length_cm, na.rm = TRUE),
            sd_length = sd(length_cm, na.rm = TRUE))
```

```{r}
lizards_subset2 <- lizards %>% 
  filter(common_name %in% c("western whiptail", "colorado checkered", "eastern fence")) %>% 
  mutate(length_cm = total_length / 10) %>% 
  group_by(common_name, site) %>%
   summarize(mean_length = mean(length_cm, na.rm = TRUE),
            sd_length = sd(length_cm, na.rm = TRUE))
```

```{r}
# facet_wrap splits into multiple charts based on the variable you want, adding scales = "free" creates the best scale for each. the default is the same scale for each chart created
lizards %>% 
  ggplot(aes(x = total_length,
             y = weight)) +
  geom_point(aes(color = common_name)) +
  facet_wrap(~ common_name, scales = "free")
```

```{r}
# create a subset of lizards of the count of each species
lizard_counts <- lizards %>% 
  count(common_name, name = "count", sort = TRUE)

# plot them
# if you want groups to show up in a meaningful order in ggplot, they have to be converted to factors
# fct_reorder() sets order for a factor based on values in another column
# fct_reorder(variable to convert, variable setting order of factors)
lizard_counts %>% 
  ggplot(aes(y = fct_reorder(common_name, count),
             x = count)) +
  geom_col(aes(fill = common_name),
           color = "black")

# if you a put a "-" in front of the second argument in fct_reorder, it switches that order. i.e from top to bottom to bottom to top
lizard_counts %>% 
  ggplot(aes(y = fct_reorder(common_name, -count),
             x = count)) +
  geom_col(aes(fill = common_name),
           color = "black")
```

```{r}
# playing with scales
# need to use scale_y_continous because y is weight, a continuous variable
# change the x and y limits, line breaks
lizards %>% 
  ggplot(aes(x = total_length,
             y = weight)) +
  geom_point(aes(color = weight)) +
  scale_y_continuous(limits = c(0, 100),
                     breaks = seq(from = 0, to = 100, by = 20),
                     expand = c(0, 0)) +
  scale_color_gradientn(colors = c("red", "orange", "pink", "black"))
```
